# PART 1

# These are some of the variables used in the program

widgets = 1
list = []
day = 1

totalpoints = 0

# This while loop has the user input a number that will be added to a list and this goes on until they input
# a negative number to which it will then go onto the next loop

while widgets >= 0:
    widgets = int(input("Please input the production of widgets for day "+str(day)+" (Type -1 to run the rest of program): "))
    if widgets >= 0:
        list.append(widgets)
        day += 1
day -= 1

print('\n')

# This is the loop that gets us the percentage of increasing and decreasing days
# it does this by checking to see
for i in range(1, day):
    # These are the rest of the variables used in the program
    positivepoints = 0
    nothingpoints = 0
    num = 0
    num2 = 0
    thing = num + i
    while thing <= day - 1:
        increasing_and_decreasing = list[thing] - list[num]
        if increasing_and_decreasing > 0:
            positivepoints += 1
        elif increasing_and_decreasing == 0:
            nothingpoints += 1
        num = num + 1
        thing = num + i
        num2 = num2 + 1

# This is the equation used to be able to find the percentage in increasing and decresing
# It is also the print statement that looks nice.
    decreasing = str(round(nothingpoints / num2 * 100, 1))
    increasing = str(round(positivepoints / num2 * 100, 1))
    print("For a", str(i), "day interval-", increasing, "% of the production was increasing "
                                                          "and", decreasing, "% of the production was decreasing.")
 
 # PART 2
 import math

# To start it off we have all of the variables that are going to be used within the code, so all of the
# dictionaries, lists, and other things that add some fluff to the code

# Near the end w got a little annoyed with this code because it wasn't working for so long so you can
# see that my variable names slowly deteriorated, but that what comments are for!

playerlist = []
scorelist = []
golf_and_score = {}
round1 = 0
i = 0
guycount = 1
num = 0
dub = 0

print("\nIt looks like round two just finished! Lets see which golfers", end=' ')
print("are going to make the cut and get into round 3!")

# Here is the first while loop that the code uses and what it does is that it looks to see what the first round
# score is and as long as its above 0 it'll run the code. If it's below 0 (like for when you need to exit the loop)
# it'll go to the next part of the program.

# The actual function of the while loop is that it takes in all of the values of round 1 and 2 scores and golfer names
# and adds them to a list that then get turned into a dictionary in order to do the median part.

while round1 >= 0:
    print("\nPlease enter golfer", str(guycount) + "'s", "score for round 1 (If you have added everyone", end=' ')
    print("type -1 to quit):", end=' ')
    round1 = int(input())
    if round1 < 0:
        pass
    elif round1 >= 0:
        print("Please enter golfer", str(guycount) + "'s", "score for round 2:", end=' ')
        round2 = int(input())
        print("Please enter name of golfer", str(guycount) + ':', end=' ')
        playerlist = playerlist + [input()]
        scorelist = scorelist + [round1 + round2]
    guycount += 1

# These two for loops turn lists into dictionaries

for key in playerlist:
    for value in scorelist:
        golf_and_score[key] = value
        scorelist.remove(value)
        break

# I know we weren't supposed to use the sort function but for our sanity, we did.

sort_orders = sorted(golf_and_score.items(), key=lambda x: x[1])

# In order to find the median we take the length of how long the sorted dictionary was and divided it by two and
# rounded up. This got us the median in a pretty easy way.

median = int(len(golf_and_score) / 2)
median = math.ceil(median)

# here we have an arbitrary variable that is equal to 0 and that is how we print our the values that we want.
# It does a simple loop to turn those dictionaries back into lists, but only take the key of the dictionary and
# print it out. It does this until the index reaches the amount that the median is and goes onto the next
# while loop. The next loop does the same exact thing as the first but for values that are over the median, but
# less then the total length of the golfer name and score dictionary.

print("\nThese golfers made the cut! Check them out:", end='')
while dub <= median:
    keys = golf_and_score.keys()
    keys_list = list(keys)
    madecut = keys_list[dub]
    dub +=1
    print('',madecut, end='')
print('')
print("\nThese golfers didn't make the cut! Better luck next time:",end='')
while dub > (median) and dub < len(golf_and_score):
    keys = golf_and_score.keys()
    keys = list(keys)
    didntmakecut = keys_list[dub]
    dub +=1
    print('',didntmakecut, end='')
    
# PART 3

from math import *

# Gets number of dimensions from user
num_d = int(input('Enter number of dimensions (1, 2, or 3): '))

# If the user enters 1 the dimension will be an x axis and use this loop
if num_d == 1:
    vector_A = input('\nInput 1 number:')
    list_V_A = list(vector_A.split())
    for i in range(0, len(list_V_A)):
        list_V_A[i] = int(list_V_A[i])
    list_V_A.append(0)  # Allows further calculations to be made without excess code
    list_V_A.append(0)
    print("Vector A has been created [x] = ", list_V_A)

    vector_B = input('\nInput 1 number:')
    list_V_B = list(vector_B.split())
    for i in range(0, len(list_V_B)):
        list_V_B[i] = int(list_V_B[i])
        list_V_B.append(0)  # Allows further calculations to be made without excess code
        list_V_B.append(0)
    print('Vector B has been created [x] = ', list_V_A)

# If the user enters 2 the dimension it will be an x y plane on will use this loop
elif num_d == 2:
    vector_A = input('\nInput 2 numbers separated by spaces:')
    list_V_A = list(vector_A.split())
    for i in range(0, len(list_V_A)):
        list_V_A[i] = int(list_V_A[i])
    list_V_A.append(0)  # Allows further calculations to be made without excess code
    print('Vector A has been created [x, y] = ', list_V_A)

    vector_B = input('\nInput 2 numbers separated by spaces:')
    list_V_B = list(vector_B.split())
    for i in range(0, len(list_V_B)):
        list_V_B[i] = int(list_V_B[i])
    list_V_B.append(0)   # Allows further calculations to be made without excess code
    print('Vector B has been created [x, y] = ', list_V_A)

# If the user inputs anything else they will be prompted to use an x y z matrix and use this loop
else:
    if num_d > 3:
        print("\nYou have entered a number in a dimension that is too high, you will use the third dimension.")
        pass
    else:
        pass
    vector_A = input('\nInput 3 numbers separated by spaces:')
    list_V_A = list(vector_A.split())
    for i in range(0, len(list_V_A)):
        list_V_A[i] = int(list_V_A[i])
    print('Vector A has been created [x, y, z] = ', list_V_A)

    vector_B = input('\nInput 3 numbers separated by spaces:')
    list_V_B = list(vector_B.split())
    for i in range(0, len(list_V_B)):
        list_V_B[i] = int(list_V_B[i])
    print('Vector B has been created [x, y, z] = ', list_V_A)

# Gets the sum of all the vectors in the list
sum_V = []
for i in range(0, len(list_V_A)):
    sum_V.append(list_V_A[i] + list_V_B[i])
print('\nThe sum of the two vectors is', sum_V)

# Gets the difference of all the vectors in the list
difference_V = []
for i in range(0, len(list_V_A)):
    difference_V.append(list_V_A[i] - list_V_B[i])
print('The difference of the two vectors is', difference_V)

# Calculates the magnitude of each vector with the equation sqrt(x^2 + y^2 + z^2)
V_A_magnitude = sqrt((list_V_A[0] ** 2) + (list_V_A[1] ** 2) + (list_V_A[2] ** 2))
V_B_magnitude = sqrt((list_V_B[0] ** 2) + (list_V_B[1] ** 2) + (list_V_B[2] ** 2))
print('\nThe magnitude of vector A is {:.3f}'.format(V_A_magnitude))
print('The magnitude of vector B is {:.3f}'.format(V_B_magnitude))

# Calculates the inner product of all the vectors using the equation (x1 * x2) + (y1 +y2) + (z1 + z2)
dot_product = (list_V_A[0] * list_V_B[0]) + (list_V_A[1] * list_V_B[1]) + (list_V_A[2] * list_V_B[2])
print('\nThe dot product of the vectors is {:.3f}'.format(dot_product))
