import numpy as np
import matplotlib.pyplot as plt

# This was the first part of the lab multiply and messing around with matrices

a = np.arange(12).reshape(3,4)
print('A=', a)
b = np.arange(8).reshape(4,2)
print('\nB=', b)
c = np.arange(6).reshape(2,3)
print('\nC=', c)
f = np.arange(3)
print('\nF=', f)

d = a @ b @ c
print('\nD=', d)

dt = np.transpose(d)
print('\nDT=', dt)

e = np.sqrt(d) / 2
print('\nE=', e)

x = np.linalg.tensorsolve(e, f)
print('\nx=', x.shape)

# TWO PARABOLA ==================================================================================

num = -2
xlist = []
ylist = []
y2list = []

plt.figure()

# We used a while loop here to be able to get the (x,y) coordinates so that we can later plot them on the graph

while num >= -2 and num <= 2:
    d = num
    d2 = num
    xlist.append(d)
    y = (1/8) * (d ** 2)
    y2 = (1/24) * (d2 ** 2)
    ylist.append(y)
    y2list.append(y2)
    num += .1
print(xlist)
print(ylist)
plt.plot(xlist, ylist, linewidth = 2)
plt.plot(xlist, y2list, linewidth = 6)  # This is the actual plotting using matplotlib
plt.legend(['f = 2', 'f = 6'])
plt.title('Parabola Plots With Varying Focal Lengths')
plt.ylabel('y')
plt.xlabel('x')

# STAR GRAPH ===================================================================================

plt.figure()
plt.title("Plot of cubic polynomial")
plt.ylabel('y values')
plt.xlabel('x values')      # This is the plotting of the star graph
x = np.linspace(-4, 4, 25)
y = (2 * (x ** 3)) + (3 * (x ** 2)) - (11 * x) - 6
plt.plot(x, y, '*', markersize=7.5, markerfacecolor='y', markeredgewidth=1, markeredgecolor='k' )

# SIN AND COS =============================================================================================

x = np.linspace(-2 * np.pi, 2 * np.pi, 100)

sin = np.sin(x)
cos = np.cos(x)

fig = plt.figure()

# this is plotting subplots using matplot lib

ax = fig.add_subplot(2, 1, 1)
ax.set_title('Plot of cos(x) and sin(x)')
plt.ylabel("y=cos(x)")
plt.plot(x, cos, color = 'maroon', label="cos(x)")
plt.legend(framealpha=1, frameon=True, loc='lower right')
plt.grid()

ax = fig.add_subplot(2, 1, 2)
plt.ylabel("y=sin(x)")
plt.plot(x, sin, color = 'dodgerblue', label='sin(x)')
plt.legend(framealpha=1, frameon=True, loc='upper right')
plt.grid()

plt.show()
